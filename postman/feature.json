{
	"info": {
		"_postman_id": "61e256dc-8e28-4bd3-bcf7-a6d9b038f308",
		"name": "Subscription",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34062628"
	},
	"item": [
		{
			"name": "User1 subscribes to user1 faild CONFLICT",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"    try {\r",
							"        const user1 = await api.addUser(rnd.getUser());\r",
							"        const foundUser = await api.findUser(user1.id);\r",
							"        pm.collectionVariables.set(\"uid\", user1.id);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/subscription/:userId/subscribe/:userId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"subscription",
						":userId",
						"subscribe",
						":userId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "User1 subscribe to unknown user Faild",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"    try {\r",
							"    const user1 = await api.addUser(rnd.getUser());\r",
							"    const foundUser = await api.findUser(user1.id);\r",
							"    pm.collectionVariables.set(\"uid\", user1.id);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/subscription/:userId/subscribe/10000",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"subscription",
						":userId",
						"subscribe",
						"10000"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "User2 second subcription user1 CONFLICT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"    \r",
							"    let compilation;\r",
							"    try {\r",
							"        const user1 = await api.addUser(rnd.getUser());\r",
							"        const user2 = await api.addUser(rnd.getUser());\r",
							"        const foundUser1 = await api.findUser(user1.id);\r",
							"        const foundUser2 = await api.findUser(user2.id);\r",
							"        pm.collectionVariables.set(\"uid\", user1.id);\r",
							"        pm.collectionVariables.set(\"uid1\", user2.id);\r",
							"        const subscribe = await api.subscribeUsers(user1.id, user2.id)\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"}; \r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/subscription/:userId1/subscribe/:userId2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"subscription",
						":userId1",
						"subscribe",
						":userId2"
					],
					"variable": [
						{
							"key": "userId1",
							"value": "{{uid}}"
						},
						{
							"key": "userId2",
							"value": "{{uid1}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "User2 follow to user1",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"    \r",
							"    let compilation;\r",
							"    try {\r",
							"        const user1 = await api.addUser(rnd.getUser());\r",
							"        const user2 = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"uid\", user1.id);\r",
							"        pm.collectionVariables.set(\"uid1\", user2.id);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"}; \r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Пользователь должен содержать поля: id, name, email\", function () {\r",
							"    pm.expect(target).to.have.property('subscriptionId');\r",
							"    pm.expect(target).to.have.property('user');\r",
							"    pm.expect(target).to.have.property('follower');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные пользователей должны соответствовать до запроса и после запроса\", function (){\r",
							"    pm.expect(target.user.id.toString()).equal(pm.collectionVariables.get(\"uid\").toString())\r",
							"    pm.expect(target.follower.id).equal(pm.collectionVariables.get(\"uid1\"))\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/subscription/:userId1/subscribe/:userId2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"subscription",
						":userId1",
						"subscribe",
						":userId2"
					],
					"variable": [
						{
							"key": "userId1",
							"value": "{{uid}}"
						},
						{
							"key": "userId2",
							"value": "{{uid1}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get I follow",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"    \r",
							"    let compilation;\r",
							"    try {\r",
							"        const follower1 = await api.addUser(rnd.getUser());\r",
							"        const user1 = await api.addUser(rnd.getUser());\r",
							"        const user2 = await api.addUser(rnd.getUser());\r",
							"\r",
							"        pm.collectionVariables.set(\"uid\", user1.id);\r",
							"        pm.collectionVariables.set(\"uid1\", follower1.id);\r",
							"\r",
							"        const subscribe = await api.subscribeUsers(user1.id, follower1.id)\r",
							"\r",
							"        pm.collectionVariables.set(\"uid\", user2.id);\r",
							"\r",
							"        const subscribe1 = await api.subscribeUsers(user2.id, follower1.id)\r",
							"\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"}; \r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Должно быть найдено только 2 пользователя\", function () {\r",
							"    pm.expect(target.length).to.equal(2);\r",
							"});\r",
							"\r",
							"pm.test(\"Ответ должен содержать поля: \", function () {\r",
							"    pm.expect(target[0]).to.have.property(\"id\")\r",
							"    pm.expect(target[0]).to.have.property(\"email\")\r",
							"    pm.expect(target[0]).to.have.property(\"name\")\r",
							"    pm.expect(target[1]).to.have.property(\"id\")\r",
							"    pm.expect(target[1]).to.have.property(\"email\")\r",
							"    pm.expect(target[1]).to.have.property(\"name\")\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/subscription/:userId1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"subscription",
						":userId1"
					],
					"variable": [
						{
							"key": "userId1",
							"value": "{{uid1}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get My followers",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"    \r",
							"    try {\r",
							"        const follower1 = await api.addUser(rnd.getUser());\r",
							"        const follower2 = await api.addUser(rnd.getUser());\r",
							"        const user1 = await api.addUser(rnd.getUser());\r",
							"\r",
							"        pm.collectionVariables.set(\"uid\", user1.id);\r",
							"        pm.collectionVariables.set(\"uid1\", follower1.id);\r",
							"\r",
							"        const subscribe = await api.subscribeUsers(user1.id, follower1.id)\r",
							"        \r",
							"        pm.collectionVariables.set(\"uid1\", follower2.id);\r",
							"\r",
							"        const subscribe1 = await api.subscribeUsers(user1.id, follower2.id)\r",
							"\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"}; \r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Должно быть найдено только 2 пользователя\", function () {\r",
							"    pm.expect(target.length).to.equal(2);\r",
							"});\r",
							"\r",
							"pm.test(\"Ответ должен содержать поля: \", function () {\r",
							"    pm.expect(target[0]).to.have.property(\"id\")\r",
							"    pm.expect(target[0]).to.have.property(\"email\")\r",
							"    pm.expect(target[0]).to.have.property(\"name\")\r",
							"    pm.expect(target[1]).to.have.property(\"id\")\r",
							"    pm.expect(target[1]).to.have.property(\"email\")\r",
							"    pm.expect(target[1]).to.have.property(\"name\")\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/subscription/:userId/followers",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"subscription",
						":userId",
						"followers"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Cancel subscription user2 to user1",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        const follower = await api.addUser(rnd.getUser());\r",
							"        const subscribe = await api.subscribeUsers(user.id, follower.id)\r",
							"        pm.collectionVariables.set(\"uid\", user.id);\r",
							"        pm.collectionVariables.set(\"uid1\", follower.id)\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"\r",
							"let body\r",
							"const req = {\r",
							"                url: \"http://localhost:8080/subscription/\" + pm.collectionVariables.get(\"uid1\"),\r",
							"                method: \"GET\",\r",
							"                body: body == null,\r",
							"                header: { \"Content-Type\": \"application/json\" },\r",
							"            };\r",
							"\r",
							"pm.sendRequest(req, (error, response) => {\r",
							"    pm.test(\"Подписка должна быть отменена после выполнения запроса\", function(){\r",
							"        pm.expect(response.json().length).to.eql(0);\r",
							"    });\r",
							"})            "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/subscription/:userId/subscribe/:followerId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"subscription",
						":userId",
						"subscribe",
						":followerId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}"
						},
						{
							"key": "followerId",
							"value": "{{uid1}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Cancel subscribe unknow user Faild",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"    try {\r",
							"        const user1 = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"uid\", user1.id);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/subscription/:userId/subscribe/:followerId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"subscription",
						":userId",
						"subscribe",
						":followerId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}"
						},
						{
							"key": "followerId",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Cancel unknown sunscription faild",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"    try {\r",
							"        const user1 = await api.addUser(rnd.getUser());\r",
							"        const user2 = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"uid\", user1.id);\r",
							"        pm.collectionVariables.set(\"uid1\", user2.id);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/subscription/:userId/subscribe/:followerId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"subscription",
						":userId",
						"subscribe",
						":followerId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}"
						},
						{
							"key": "followerId",
							"value": "{{uid1}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get users events",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"    \r",
							"    let compilation;\r",
							"    try {\r",
							"        const follower1 = await api.addUser(rnd.getUser());\r",
							"        const user1 = await api.addUser(rnd.getUser());\r",
							"        const user2 = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"uid\", user1.id);\r",
							"        pm.collectionVariables.set(\"uid1\", follower1.id);\r",
							"        const subscribe = await api.subscribeUsers(user1.id, follower1.id)\r",
							"\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let event = await api.addEvent(user1.id, rnd.getEvent(category.id))\r",
							"\r",
							"        event.requestModeration = true;\r",
							"        event.participantLimit = 10;\r",
							"        event = await api.publishEvent(event.id);\r",
							"\r",
							"        const requestToJoin = await api.publishParticipationRequest(event.id, user2.id);\r",
							"        const confirmedRequest = await api.acceptParticipationRequest(event.id, user1.id, requestToJoin.id);\r",
							"\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"}; \r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json()[0];\r",
							"\r",
							"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate\", function () {\r",
							"    pm.expect(target).to.contain.keys('id', 'title', 'annotation', 'category', 'paid', 'eventDate');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/subscription/:userId/events?from=0&size=15",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"subscription",
						":userId",
						"events"
					],
					"query": [
						{
							"key": "from",
							"value": "0"
						},
						{
							"key": "size",
							"value": "15"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"API = class {\r",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {\r",
					"        this.baseUrl = baseUrl;\r",
					"        this.pm = postman;\r",
					"        this._verbose = verbose;\r",
					"    }\r",
					"\r",
					"    async addUser(user, verbose=null) {\r",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);\r",
					"    }\r",
					"\r",
					"    async findUser(userId, verbose=null) {\r",
					"        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);\r",
					"    }\r",
					"\r",
					"    async subscribeUsers(userId, followerId) {\r",
					"        return this.post('/subscription/' + userId + '/subscribe/' + followerId);            \r",
					"    }\r",
					"\r",
					"    async addCategory(category, verbose=null) {\r",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addEvent(userId, event, verbose=null) {\r",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);\r",
					"    }\r",
					"\r",
					"    async publishEvent(eventId, verbose=null) {\r",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);\r",
					"    }\r",
					"\r",
					"    async publishParticipationRequest(eventId, userId, verbose=null) {\r",
					"        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);\r",
					"    }\r",
					"\r",
					"    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {\r",
					"        return this.patch('/users/' + userId + '/events/' + eventId + '/requests', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);\r",
					"    }\r",
					"\r",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);\r",
					"    }\r",
					"\r",
					"        async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {\r",
					"        return new Promise((resolve, reject) => {\r",
					"            verbose = verbose == null ? this._verbose : verbose;\r",
					"            const request = {\r",
					"                url: this.baseUrl + path,\r",
					"                method: method,\r",
					"                body: body == null ? \"\" : JSON.stringify(body),\r",
					"                header: { \"Content-Type\": \"application/json\" },\r",
					"            };\r",
					"            if(verbose) {\r",
					"                console.log(\"Отправляю запрос: \", request);\r",
					"            }\r",
					"\r",
					"            try {\r",
					"                this.pm.sendRequest(request, (error, response) => {\r",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {\r",
					"                        let err = error ? error : JSON.stringify(response.json());\r",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,\r",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + \r",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));\r",
					"\r",
					"                        reject(new Error(errorText + err));\r",
					"                    }\r",
					"                    if(verbose) {\r",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());\r",
					"                    }\r",
					"                    if (response.stream.length === 0){\r",
					"                        reject(new Error('Отправлено пустое тело ответа'))\r",
					"                    }else{\r",
					"                        resolve(response.json());\r",
					"                    }\r",
					"                });\r",
					"                \r",
					"            } catch(err) {\r",
					"                if(verbose) {\r",
					"                    console.error(errorText, err);\r",
					"                }\r",
					"                return Promise.reject(err);\r",
					"            }\r",
					"        });\r",
					"    }\r",
					"}; \r",
					"\r",
					"RandomUtils = class {\r",
					"    constructor() {}\r",
					"    getUser() {\r",
					"        return {\r",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),\r",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')\r",
					"        };\r",
					"    }\r",
					"\r",
					"        getCategory() {\r",
					"        return {\r",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 10000 * Math.random()).toString()\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getEvent(categoryId) {\r",
					"        return {\r",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),\r",
					"            category: categoryId,\r",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),\r",
					"            eventDate: this.getFutureDateTime(),\r",
					"            location: {\r",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),\r",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),\r",
					"            },\r",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),\r",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),\r",
					"        }\r",
					"    }\r",
					"\r",
					"        getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {\r",
					"        let moment = require('moment');\r",
					"\r",
					"        let m = moment();\r",
					"        m.add(hourShift, 'hour');\r",
					"        m.add(minuteShift, 'minute');\r",
					"        m.add(yearShift, 'year');\r",
					"\r",
					"        return m.format('YYYY-MM-DD HH:mm:ss');\r",
					"    }\r",
					"\r",
					"    getWord(length = 1) {\r",
					"        let result = '';\r",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
					"        const charactersLength = characters.length;\r",
					"        let counter = 0;\r",
					"        while (counter < length) {\r",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
					"            counter += 1;\r",
					"        }\r",
					"        return result;\r",
					"    }\r",
					"\r",
					"\r",
					"};    "
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "uid",
			"value": "0"
		},
		{
			"key": "uid1",
			"value": "0",
			"type": "string"
		}
	]
}